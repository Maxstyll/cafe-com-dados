1+1
setwd("/mnt/sources/Estudos/cafe-com-dados/R")
dados <- read.csv("../dados/db-cartao-credito.csv")
x_train <- training[, c(1,4,5,11,12,13,14,17)]
y_train <- training[, 24]
set.seed(12345)
trainindex <- sample(row, 0.7*row, replace = FALSE)
training <- myDados[trainindex, ]
validation <- myDados[-trainindex,]
x_train <- training[, c(1,4,5,11,12,13,14,17)]
y_train <- training[, 24]
x_valid <- validation[, c(1,4,5,11,12,13,14,17)]
validation <- myDados[-trainindex,]
library(mlbench)
library(caret)
library(e1071)
library(randomForest)
# Identificar as variáveis categoricas
dados$default.payment.next.month <- factor(dados$default.payment.next.month)
dados$SEX <- factor(dados$SEX)
dados$EDUCATION <- factor(dados$EDUCATION)
dados$MARRIAGE <- factor(dados$MARRIAGE)
dados = na.omit(dados)
# Tratar variáveis com vies
preProcessParams <- preProcess(dados, method = c("BoxCox"))
print(preProcessParams)
# Transformacão do dataset usando os parametros
myDados <- predict(preProcessParams, dados)
# Verificar o balanceamento das variáveis
skewness(myDados$LIMIT_BAL)
histogram(myDados$LIMIT_BAL)
# Usa Random Foreste para identificar as variaveis mais relevantes
rfModel = randomForest(myDados$default.payment.next.month ~ ., data = myDados, ntree=500)
varImpPlot(rfModel)
# Dividir os dados em Treino e Test
row <- nrow(myDados)
row
set.seed(12345)
trainindex <- sample(row, 0.7*row, replace = FALSE)
training <- myDados[trainindex, ]
validation <- myDados[-trainindex,]
# Prepara ois dataser com as melhores variáveis preditoras
x_train <- training[, c(1,4,5,11,12,13,14,17)]
y_train <- training[, 24]
x_valid <- validation[, c(1,4,5,11,12,13,14,17)]
y_valid <- validation[, 24]
# Modelo KNN
knnModel = train(x=x_train,
y=y_train,
method="knn",
preProc=c("center", "scale"),
tuneLength = 10)
#Plot da acurácia
plot(knnModel$results$k,
knnModel$results$Accuracy,
type="o",
xlab="Nímero de Vizinhos mais próximos (K)",
ylab="Acurácia",
main="Modelo KNN para previsão de concessão de cartão de crédito")
knnPred = predict(knnModel, newdata = x_valid)
knnPred
confusionMatrix(knnPred, y_valid)
knnModel
confusionMatrix(knnPred, y_valid)
curve(-x * log2(x) - (1-x) * log2(1 - x), col= "red", xlab="x", ylab="Entropy", lwd =4)
dados <- read.csv("../dados/db-banco-credito.csv")
View(dados)
str(dados)
table(dados$checking_balance)
table(dados$savings_balance)
summary(dados$months_loan_duration)
summary(dados$amount)
table(dados$default)
train_sample <- sample(1000, 900)
train_sample
training <- dados[train_sample, ]
validation <- dados[-train_sample, ]
prop.table(table(training$default))
prop.table(table(validation$default))
install.packages("C50")
library(C50)
?C5.0
credit_model <- C5.0(training[-17], training$default)
credit_model
summary(credit_model)
credit_pred <- predict(credit_model, validation)
install.packages("gmodels")
library(gmodels)
?CrossTable
CrossTable(validation$default,
credit_pred,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c("Observado", "Previsto"))
credit_model_10 <- c5.0(training[-17], training$default, trials = 10)
credit_model_10 <- C5.0(training[-17], training$default, trials = 10)
credit_model_10
summary(credit_model_10)
summary(credit_model)
credit_pred10 <- predict(credit_model_10, validation)
CrossTable(validation$default,
credit_pred10,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c("Observado", "Previsto"))
CrossTable(validation$default,
credit_pred,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c("Observado", "Previsto"))
matrix_dimensions <- list(c("no", "yes"), c("no", "yes"))
names(matrix_dimensions) <- c("Previsto", "Observado")
matrix_dimensions
error_cost <- matrix(c(0, 1, 4, 0), nrow = 2, dimnames = matrix_dimensions)
error_cost
?C5.0
credit_cost_model <- C5.0(training[-17], training$default, trials = 10, costs = error_cost)
credit_pred10_cost <- predict(credit_cost_model, validation)
CrossTable(validation$default,
credit_pred10_cost,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c("Observado", "Previsto"))
credit_cost_model <- C5.0(training[-17], training$default, costs = error_cost)
credit_pred10_cost <- predict(credit_cost_model, validation)
CrossTable(validation$default,
credit_pred10_cost,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c("Observado", "Previsto"))
CrossTable(validation$default,
credit_pred,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c("Observado", "Previsto"))
install.packages("rpart.plot")
?prp
library(rpart.plot)
?prp
prp(credit_pred, type = 0, extra = 1, under = TRUE, compress = TRUE)
install.packages("rpart")
install.packages("rpart")
library(rpart)
credit_tree <- rpart(default ~ .,
data = training,
method = "class",
parms = list(split = "information"),
control = rpart.control(minsplit = 1)
)
prp(credit_tree, type = 0, extra = 1, under = TRUE, compress = TRUE)
