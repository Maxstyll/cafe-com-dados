1+1
setwd("/mnt/sources/Estudos/R/cafe-com-dados")
setwd("/mnt/sources/Estudos/R/cafe-com-dados")
install.packages("mlbench")
install.packages("caret")
install.packages("e1071")
library(mlbench)
library(caret)
library(e1071)
dados <- read.csv("dats/db-cartao-credito.csv")
dados <- read.csv("datos/db-cartao-credito.csv")
dados <- read.csv("dados/db-cartao-credito.csv")
View(dados)
View(dados)
View(dados)
View(dados)
View(dados)
skewness(dados$LIMIT_BAL)
histogram(dados$LIMIT_BAL)
summary(dados)
str(dados)
preProcessamentoParams <- preProcess(dados, method = c("BoxCox"))
print(preProcessamentoParams)
transformed <- predict(preProcessamentoParams, dados)
myDadosTrans <- transformed
str(myDadosTrans)
skewness(myDadosTrans$LIMIT_BAL)
skewness(dados$LIMIT_BAL)
histogram(myDadosTrans$LIMIT_BAL)
myDadosTrans$default.payment.next.month <- factor(myDadosTrans$default.payment.next.month)
myDadosTrans$SEX <- factor(myDadosTrans$SEX)
myDadosTrans$EDUCATION <- factor(myDadosTrans$EDUCATION)
myDadosTrans$MARRIAGE <- factor(myDadosTrans$MARRIAGE)
myDadosTrans = na.omit(myDadosTrans)
str(myDadosTrans)
install.packages("randomForest")
library(randomForest)
rfModel = randomForest(myDadosTrans$default.payment.next.month ~ ., data = myDadosTrans, ntree=500)
varImpPlot(rfModel)
row <- nrow(myDadosTrans)
row
set.seed(12345)
trainindex <- sample(row, 0.7*row, replace = FALSE)
training <- myDadosTrans[trainindex,]
validation <- myDadosTrans[-trainindex,]
y_training <- training[, -24]
x_validation <- validation[, -24]
y_validation <- validation[, 24]
x_training <- training
y_training <- training[, -24]
x_validation <- validation[, -24]
y_validation <- validation[, 24]
x_training <- training[, c(2,3,4,5,24)]
y_training <- training[, 24]
x_validation <- validation[, c(2,3,4,5,24)]
y_validation <- validation[, 24]
# Modelo KNN
?train
?train
knnModel = train(x=x_training,
y=y_training,
method = "knn",
preProc=c("center", "scale"),
tuneLength = 10)
plot(knnModel$results$k,
knnModel$results$Accuracy,
type="o",
xlab="Numero de Vizinhos mais Próximos (K)",
ylab="Acyrácia",
main="Modelo KNN para Previsão de Concessão de Cartão de Crédito")
knnModel
rfModel = randomForest(dados$default.payment.next.month ~ ., data = dados, ntree=500)
varImpPlot(rfModel)
rfModel = randomForest(myDadosTrans$default.payment.next.month ~ ., data = myDadosTrans, ntree=500)
x_training <- training[, c(2,3,4,5)]
y_training <- training[, 24]
x_validation <- validation[, c(2,3,4,5)]
y_validation <- validation[, 24]
knnModel = train(x=x_training,
y=y_training,
method = "knn",
preProc=c("center", "scale"),
tuneLength = 10)
knnModel
plot(knnModel$results$k,
knnModel$results$Accuracy,
type="o",
xlab="Numero de Vizinhos mais Próximos (K)",
ylab="Acyrácia",
main="Modelo KNN para Previsão de Concessão de Cartão de Crédito")
knnPred = predict(knnModel, newdata = x_validation)
knnPred
y_validation
confusionMatrix(knnPred, y_validation)
# Define pasta de trabalho
setwd("/mnt/sources/Estudos/R/cafe-com-dados")
# Instalar e carregar os pacotes
install.packages("mlbench")
# Define pasta de trabalho
setwd("/mnt/sources/Estudos/R/cafe-com-dados")
# Instalar e carregar os pacotes
install.packages("mlbench")
install.packages("mlbench")
install.packages("caret")
install.packages("e1071")
library(mlbench)
library(caret)
library(e1071)
# Carregar o dataset
dados <- read.csv("dados/db-cartao-credito.csv")
View(dados)
# Verifica o balanceamento das variáveis
skewness(dados$LIMIT_BAL)
histogram(dados$LIMIT_BAL)
# Sumariza os dados
summary(dados)
str(dados)
# 1 - Dados com vies
preProcessamentoParams <- preProcess(dados, method = c("BoxCox"))
print(preProcessamentoParams)
# Transformar o dataset usando os pârametros
transformed <- predict(preProcessamentoParams, dados)
myDadosTrans <- transformed
# Verifica o balanceamento das variáveis 1- respondido
str(myDadosTrans)
# Carregar o dataset
dados <- read.csv("dados/db-cartao-credito.csv")
# Verifica o balanceamento das variáveis
skewness(dados$LIMIT_BAL)
histogram(dados$LIMIT_BAL)
# Sumariza os dados
summary(dados)
str(dados)
# 1 - Identificar as variaveis categoricas
myDadosTrans$default.payment.next.month <- factor(myDadosTrans$default.payment.next.month)
myDadosTrans$SEX <- factor(myDadosTrans$SEX)
myDadosTrans$EDUCATION <- factor(myDadosTrans$EDUCATION)
myDadosTrans$MARRIAGE <- factor(myDadosTrans$MARRIAGE)
# 1 - Identificar as variaveis categoricas
dados$default.payment.next.month <- factor(dados$default.payment.next.month)
dados$SEX <- factor(dados$SEX)
dados$EDUCATION <- factor(dados$EDUCATION)
dados$MARRIAGE <- factor(dados$MARRIAGE)
# 2 - Dados com vies
preProcessamentoParams <- preProcess(dados, method = c("BoxCox"))
print(preProcessamentoParams)
# Transformar o dataset usando os pârametros
transformed <- predict(preProcessamentoParams, dados)
myDadosTrans <- transformed
str(myDadosTrans)
skewness(dados$LIMIT_BAL)
skewness(myDadosTrans$LIMIT_BAL)
histogram(myDadosTrans$LIMIT_BAL)
myDadosTrans = na.omit(myDadosTrans)
str(myDadosTrans)
library(randomForest)
rfModel = randomForest(myDadosTrans$default.payment.next.month ~ ., data = myDadosTrans, ntree=500)
varImpPlot(rfModel)
setwd("/mnt/sources/Estudos/R/cafe-com-dados")
View(myDadosTrans)
# Dividir os dados em treino e teste
row <- nrow(myDadosTrans)
row
set.seed(12345)
trainindex <- sample(row, 0.7*row, replace = FALSE)
training <- myDadosTrans[trainindex,]
validation <- myDadosTrans[-trainindex,]
# Preparar os datasets com as melhores variaveis preditoras
x_training <- training[, c(2,3,4,5)]
x_training <- training[, c(0,4,5,11,12,13,14,17)]
y_training <- training[, 24]
x_validation <- validation[, c(0,4,5,11,12,13,14,17)]
y_validation <- validation[, 24]
knnModel = train(x=x_training,
y=y_training,
method = "knn",
preProc=c("center", "scale"),
tuneLength = 10)
knnModel
plot(knnModel$results$k,
knnModel$results$Accuracy,
type="o",
xlab="Número de Vizinhos mais Próximos (K)",
ylab="Acurácia",
main="Modelo KNN para Previsão de Concessão de Cartão de Crédito")
knnPred = predict(knnModel, newdata = x_validation)
confusionMatrix(knnPred, y_validation)
setwd("/mnt/sources/Estudos/R/cafe-com-dados")
library(mlbench)
library(caret)
library(e1071)
dados <- read.csv("dados/db-cartao-credito.csv")
View(dados)
View(dados)
skewness(dados$LIMIT_BAL)
histogram(dados$LIMIT_BAL)
median(dados$LIMIT_BAL)
summary(dados)
str(dados)
dados$default.payment.next.month <- factor(dados$default.payment.next.month)
dados$SEX <- factor(dados$SEX)
dados$EDUCATION <- factor(dados$EDUCATION)
dados$MARRIAGE <- factor(dados$MARRIAGE)
dados$AGE <- factor(dados$AGE)
dados$PAY_0 <- factor(dados$PAY_0)
dados$PAY_1 <- factor(dados$PAY_1)
dados$PAY_2 <- factor(dados$PAY_2)
dados$PAY_3 <- factor(dados$PAY_3)
dados$PAY_4 <- factor(dados$PAY_4)
dados$PAY_5 <- factor(dados$PAY_5)
dados$PAY_6 <- factor(dados$PAY_6)
dados = na.omit(dados)
str(dados)
preProcessParam = preProcess(dados, method = c("BoxCox"))
print(preProcessParam)
transformed <- predict(preProcessParam, dados)
myDadosTranf <- transformed
skewness(myDadosTranf$LIMIT_BAL)
histogram(myDadosTranf$LIMIT_BAL)
library(randorForest)
library(randomForest)
rfModel = randomForest(myDadosTranf$default.payment.next.month ~ ., data=myDadosTranf, ntree=500)
rfModel = randomForest(myDadosTranf$default.payment.next.month ~ .,data = myDadosTranf, ntree=500)
rfModel = randomForest(dados$default.payment.next.month ~ .,data = dados, ntree=500)
library(randomForest)
rfModel = randomForest(myDadosTrans$default.payment.next.month ~ ., data = myDadosTrans, ntree=500)
rfModel = randomForest(myDadosTranf$default.payment.next.month ~ ., data = myDadosTranf, ntree=500)
rfModel = randomForest(myDadosTranf$default.payment.next.month ~ ., data = myDadosTranf, ntree=500)
setwd("/mnt/sources/Estudos/R/cafe-com-dados")
# Carregar o dataset
dados <- read.csv("dados/db-cartao-credito.csv")
View(dados)
# Verifica o balanceamento das variáveis
skewness(dados$LIMIT_BAL)
histogram(dados$LIMIT_BAL)
# Sumariza os dados
summary(dados)
str(dados)
# 1 - Identificar as variaveis categoricas
dados$default.payment.next.month <- factor(dados$default.payment.next.month)
dados$SEX <- factor(dados$SEX)
dados$EDUCATION <- factor(dados$EDUCATION)
dados$MARRIAGE <- factor(dados$MARRIAGE)
dados = na.omit(dados)
# 2 - Dados com vies
preProcessamentoParams <- preProcess(dados, method = c("BoxCox"))
print(preProcessamentoParams)
# Transformar o dataset usando os pârametros
transformed <- predict(preProcessamentoParams, dados)
myDadosTrans <- transformed
# Verifica o balanceamento das variáveis 1- respondido
str(myDadosTrans)
skewness(myDadosTrans$LIMIT_BAL)
histogram(myDadosTrans$LIMIT_BAL)
# Usa Random Forest para encontrar as variaveis mais relevantes
#install.packages("randomForest")
library(randomForest)
rfModel = randomForest(myDadosTrans$default.payment.next.month ~ ., data = myDadosTrans, ntree=500)
dados <- read.csv("dados/db-cartao-credito.csv")
View(dados)
View(dados)
skewness(dados$LIMIT_BAL)
histogram(dados$LIMIT_BAL)
summary(dados)
str(dados)
dados$default.payment.next.month <- factor(dados$default.payment.next.month)
dados$SEX <- factor(dados$SEX)
dados$EDUCATION <- factor(dados$EDUCATION)
dados$MARRIAGE <- factor(dados$MARRIAGE)
dados = na.omit(dados)
preProcessParams <- preProcess(dados, method = c("BoxCox"))
print
print(preProcessParams)
myDados <- predict(preProcessParams, dados)
skewness(myDados$LIMIT_BAL)
skewness(dados$LIMIT_BAL)
histogram(myDados$LIMIT_BAL)
library(mlbench)
library(caret)
library(e1071)
library(randomForest)
rfModel = randomForest(myDados$default.payment.next.month ~ ., data = myDados, ntree=500)
varImpPlot(rfModel)
row <- nrow(myDados)
row
trainindex <- sample(row, 0.7*row, replace = FALSE)
training <- myDados[trainindex, ]
validation <- myDados[-trainindex,]
View(training)
View(validation)
x_train <- training[, c(1,4,5,11,12,13,14,17)]
y_train <- training[, 24]
x_valid <- validation[, c(1,4,5,11,12,13,14,17)]
y_valid <- validation[, 24]
knnModel = train(x=x_train,
y=y_train,
method="knn",
preProc=c("center", "scale"),
tuneLength = 10)
knnModel
plot(knnModel$results$k,
knnModel$results$Accuracy,
type="o",
xlab="Nímero de Vizinhos mais próximos (K)",
ylab="Acurácia",
main="Modelo KNN para previsão de concessão de cartão de crédito")
knnPred = predict(knnModel, newdata = x_valid)
confusionMatrix(knnPred, y_valid)
